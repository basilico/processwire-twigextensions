<?php namespace ProcessWire;

/**
*
* TwigExtensions
*
* See README.md for usage instructions.
*
* @author Tabea David <td@kf-interactive.com>
* @version 1.0.0
* @copyright Copyright (c) 2016
* @see https://github.com/justonestep/processwire-twigextensions
* @see http://www.processwire.com
*/

/**
* Class TwigExtensions
*/
class TwigExtensions extends WireData implements Module {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Twig Extensions',
      'summary' => 'Allows customizing twig, e.g. add extensions',
      'version' => 100,
      'href' => 'https://github.com/justonestep/processwire-twigextensions',
      'singular' => true,
      'autoload' => true,
      'icon' => 'puzzle-piece',
      'requires' => array(
        'TemplateEngineFactory',
        'TemplateEngineTwig'
      )
    );
  }

  /**
   * Initialize the module
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   */
  public function init() {
    // add hook, add twig debug mode
    if ($this->modules->get('TemplateEngineTwig')) {
      $this->addHookAfter('TemplateEngineTwig::initTwig', $this, 'addExtensions');
    }
  }

  /**
   * Hook add twig extensions
   *
   * @param HookEvent $event
   */
  public function addExtensions(HookEvent $event) {
    $twig = $event->arguments('twig');

    if ($this->config->debug) $twig->addExtension(new \Twig_Extension_Debug());
  }
}
